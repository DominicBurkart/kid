// this document is example of the minimal relations text format (mrt).

// todo create script for converting prolog relations into MRT entity relations.
// todo create syntax for explicit temporality and continuous transformations.
// todo create syntax for importing other MRT files.

// Defining a complex relation (uses the same format as an assertion).
// variables should be declared starting with an underscore.
symmetric_action(_ent1, _ent2, _act) : action(_ent1, _ent2, _act) + action(_ent2, _ent1, _act) // declare new relations based on previous ones.

// Assertion. Here used for inheritance in relations.
action(_ent1, _ent2, submerge) : symmetric_action(_ent1, _ent2, touching)

// conjugated event + an assertion.
action(water, paper, submerge) -> state(paper, wet) + entity(water)
state(paper, wet) : symmetric_action(paper, water, touching)

state(match, burning) + symmetric_action(paper, match, touching) -> state(paper, burning) + state(match, burning)
state(match, burning) + symmetric_action(paper, match, touching) -> state(paper, burning) + state(match, burning) // duplicates indicate that multiple identical events occurred.
state(match, burning) + symmetric_action(paper, match, touching) -> state(paper, burning) + state(match, burning)
state(match, burning) + symmetric_action(match, water, touching) -> state(match, wet) + entity(water)

// Notes:
// entities do not carry over from line to line. Complex relations must be defined before being used.
// when defining assertions or complex relations, any action, state, or entity can be declared as a _variable.